import React, { useState, useEffect, useRef } from 'react';
import { 
  CloudArrowUpIcon, 
  PhotoIcon, 
  CheckCircleIcon, 
  ExclamationTriangleIcon,
  XMarkIcon,
  DocumentIcon,
  PlayIcon
} from '@heroicons/react/24/outline';
import { createCosClient, uploadToCOS } from '../utils/cos';
import { initCloudBase, ensureLogin } from '../utils/cloudbase';

const CosTestPage = () => {
  const [logs, setLogs] = useState([]);
  const [status, setStatus] = useState({
    envInit: false,
    userLogin: false,
    stsTest: false,
    uploadReady: false
  });
  const [selectedFiles, setSelectedFiles] = useState([]);
  const [uploadResults, setUploadResults] = useState([]);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [isUploading, setIsUploading] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState('general');
  
  const fileInputRef = useRef();
  const logContainerRef = useRef();

  // 分类配置
  const categories = [
    { key: 'general', label: '通用图片', path: 'images/general/' },
    { key: 'banner', label: '轮播图', path: 'images/banner/' },
    { key: 'banners', label: '推广图', path: 'images/banners/' },
    { key: 'category', label: '分类图标', path: 'images/category/' },
    { key: 'products', label: '商品图片', path: 'images/products/' },
    { key: 'icons', label: '图标', path: 'images/icons/' },
    { key: 'tab', label: '标签栏', path: 'images/tab/' }
  ];

  // 添加日志
  const addLog = (message, type = 'info') => {
    const timestamp = new Date().toLocaleTimeString();
    const logEntry = {
      id: Date.now() + Math.random(),
      timestamp,
      message,
      type
    };
    
    setLogs(prev => [...prev, logEntry]);
    console.log(`[${type.toUpperCase()}] ${message}`);
    
    // 自动滚动到底部
    setTimeout(() => {
      if (logContainerRef.current) {
        logContainerRef.current.scrollTop = logContainerRef.current.scrollHeight;
      }
    }, 100);
  };

  // 清空日志
  const clearLogs = () => {
    setLogs([]);
  };

  // 步骤1: 初始化环境
  const initEnvironment = async () => {
    try {
      addLog('🔧 正在初始化CloudBase环境...', 'info');
      
      const app = initCloudBase();
      addLog(`✅ 环境初始化成功 (cloudbase-3g4w6lls8a5ce59b)`, 'success');
      
      setStatus(prev => ({ ...prev, envInit: true }));
      
      // 自动进行下一步
      setTimeout(() => loginUser(), 1000);
      
    } catch (error) {
      addLog(`❌ 环境初始化失败: ${error.message}`, 'error');
      setStatus(prev => ({ ...prev, envInit: false }));
    }
  };

  // 步骤2: 用户登录
  const loginUser = async () => {
    try {
      // 添加更详细的调试信息
      addLog('🔍 调用 ensureLogin() 函数...', 'info');
      addLog('✅ ensureLogin() 执行完成', 'success');
      addLog('🔐 正在执行用户登录...', 'info');
      
      const loginState = await ensureLogin();
      console.log('🔍 详细登录状态:', loginState);
      
      // 更详细的登录状态检查
      const isLoggedIn = loginState && loginState.isLoggedIn;
      const isOffline = loginState && loginState.user && loginState.user.isOffline;
      const hasUser = loginState && loginState.user;
      
      addLog(`🔍 登录状态检查: isLoggedIn=${isLoggedIn}, isOffline=${isOffline}, hasUser=${hasUser}`, 'info');
      
      // 安全地显示登录状态信息，避免循环引用
      if (loginState) {
        const safeLoginInfo = {
          isLoggedIn: loginState.isLoggedIn,
          hasUser: !!loginState.user,
          userType: loginState.user?.isAnonymous ? 'anonymous' : 
                   loginState.user?.isOffline ? 'offline' : 'registered',
          userId: loginState.user?.uid || 'unknown'
        };
        addLog(`🔍 登录状态详情: ${JSON.stringify(safeLoginInfo)}`, 'info');
      }
      
      if (isLoggedIn || isOffline) {
        const userType = loginState.user?.isAnonymous ? '匿名用户' : 
                        loginState.user?.isOffline ? '离线模式' : '已注册用户';
        addLog(`✅ 用户登录成功 (${userType})`, 'success');
        setStatus(prev => ({ ...prev, userLogin: true }));
        
        // 自动进行下一步
        setTimeout(() => testGetCosSts(), 1000);
      } else {
        addLog('❌ isLoggedIn=' + isLoggedIn + ', isOffline=' + isOffline, 'error');
        throw new Error('登录状态异常');
      }
      
    } catch (error) {
      addLog(`❌ 用户登录失败: ${error.message}`, 'error');
      console.error('登录错误详情:', error);
      setStatus(prev => ({ ...prev, userLogin: false }));
    }
  };
  // 步骤3: 测试获取COS临时密钥
  const testGetCosSts = async () => {
    try {
      addLog('🔑 正在测试getCosSts云函数...', 'info');
      
      const app = initCloudBase();
      const result = await app.callFunction({
        name: 'getCosSts',
        data: {
          prefix: 'images/'
        }
      });
      
      addLog('📋 云函数返回数据: ' + JSON.stringify(result, null, 2), 'info');
      
      if (result.result && result.result.success) {
        const credentials = result.result.data.credentials;
        addLog('✅ 获取COS临时密钥成功', 'success');
        addLog(`   tmpSecretId: ${credentials.tmpSecretId ? '已获取' : '缺失'}`, 'info');
        addLog(`   tmpSecretKey: ${credentials.tmpSecretKey ? '已获取' : '缺失'}`, 'info');
        addLog(`   sessionToken: ${credentials.sessionToken ? '已获取' : '缺失'}`, 'info');
        
        setStatus(prev => ({ ...prev, stsTest: true, uploadReady: true }));
        addLog('🎉 COS上传功能已就绪，可以开始上传图片！', 'success');
      } else {
        throw new Error(result.result?.error || '云函数返回失败');
      }
      
    } catch (error) {
      addLog(`❌ 获取COS临时密钥失败: ${error.message}`, 'error');
      setStatus(prev => ({ ...prev, stsTest: false, uploadReady: false }));
    }
  };

  // 文件选择处理
  const handleFileSelect = (event) => {
    const files = Array.from(event.target.files).filter(file => 
      file.type.startsWith('image/')
    );
    
    setSelectedFiles(files);
    addLog(`📁 选择了 ${files.length} 个图片文件`, 'info');
    
    files.forEach(file => {
      addLog(`   - ${file.name} (${(file.size / 1024).toFixed(1)}KB)`, 'info');
    });
  };

  // 拖拽处理
  const handleDrop = (event) => {
    event.preventDefault();
    event.currentTarget.classList.remove('border-blue-400', 'bg-blue-50');
    
    const files = Array.from(event.dataTransfer.files).filter(file => 
      file.type.startsWith('image/')
    );
    
    setSelectedFiles(files);
    addLog(`📁 通过拖拽选择了 ${files.length} 个图片文件`, 'info');
  };

  const handleDragOver = (event) => {
    event.preventDefault();
    event.currentTarget.classList.add('border-blue-400', 'bg-blue-50');
  };

  const handleDragLeave = (event) => {
    event.preventDefault();
    event.currentTarget.classList.remove('border-blue-400', 'bg-blue-50');
  };

  // 上传文件
  const uploadFiles = async () => {
    if (!status.uploadReady) {
      addLog('❌ 请先完成环境初始化和登录', 'error');
      return;
    }
    
    if (selectedFiles.length === 0) {
      addLog('❌ 请先选择要上传的文件', 'error');
      return;
    }

    setIsUploading(true);
    setUploadResults([]);
    setUploadProgress(0);
    
    try {
      addLog(`🚀 开始上传 ${selectedFiles.length} 个文件到分类: ${selectedCategory}`, 'info');
      
      const results = [];
      
      for (let i = 0; i < selectedFiles.length; i++) {
        const file = selectedFiles[i];
        const progress = ((i + 1) / selectedFiles.length) * 100;
        setUploadProgress(progress);
        
        addLog(`📤 正在上传 ${i + 1}/${selectedFiles.length}: ${file.name}`, 'info');
        
        try {
          // 生成唯一文件名
          const timestamp = Date.now();
          const randomStr = Math.random().toString(36).substring(2, 8);
          const fileExtension = file.name.split('.').pop();
          const fileName = `${timestamp}_${randomStr}.${fileExtension}`;
          
          // 上传到COS
          const result = await uploadToCOS(file, fileName, selectedCategory);
          
          const uploadResult = {
            fileName: file.name,
            cosKey: result.key,
            cosUrl: result.url,
            size: file.size,
            type: file.type,
            category: selectedCategory
          };
          
          results.push(uploadResult);
          addLog(`✅ 文件上传成功: ${file.name}`, 'success');
          addLog(`   访问URL: ${result.url}`, 'info');
          
        } catch (fileError) {
          addLog(`❌ 文件上传失败 ${file.name}: ${fileError.message}`, 'error');
          results.push({
            fileName: file.name,
            error: fileError.message,
            failed: true
          });
        }
      }
      
      setUploadResults(results);
      const successCount = results.filter(r => !r.failed).length;
      addLog(`🎉 上传完成！成功: ${successCount}, 失败: ${results.length - successCount}`, 'success');
      
    } catch (error) {
      addLog(`❌ 上传过程发生错误: ${error.message}`, 'error');
    } finally {
      setIsUploading(false);
      setUploadProgress(0);
    }
  };

  // 清空文件选择
  const clearFiles = () => {
    setSelectedFiles([]);
    setUploadResults([]);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
    addLog('🗑️ 已清空文件选择', 'info');
  };

  // 自动开始测试
  useEffect(() => {
    addLog('🎯 COS图片上传测试页面已加载', 'info');
    addLog('点击"开始自动测试"按钮开始测试流程', 'info');
  }, []);

  return (
    <div className="p-6 space-y-6">
      {/* 页面标题 */}
      <div className="flex items-center space-x-3">
        <CloudArrowUpIcon className="w-8 h-8 text-blue-600" />
        <div>
          <h1 className="text-2xl font-bold text-gray-900">COS图片上传功能测试</h1>
          <p className="text-sm text-gray-600">测试CloudBase环境、用户认证和COS上传功能</p>
        </div>
      </div>

      {/* 测试状态卡片 */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <div className={`p-4 rounded-lg border-2 ${status.envInit ? 'border-green-200 bg-green-50' : 'border-gray-200 bg-gray-50'}`}>
          <div className="flex items-center space-x-2">
            {status.envInit ? (
              <CheckCircleIcon className="w-5 h-5 text-green-600" />
            ) : (
              <ExclamationTriangleIcon className="w-5 h-5 text-gray-400" />
            )}
            <span className={`font-medium ${status.envInit ? 'text-green-800' : 'text-gray-600'}`}>
              环境初始化
            </span>
          </div>
        </div>
        
        <div className={`p-4 rounded-lg border-2 ${status.userLogin ? 'border-green-200 bg-green-50' : 'border-gray-200 bg-gray-50'}`}>
          <div className="flex items-center space-x-2">
            {status.userLogin ? (
              <CheckCircleIcon className="w-5 h-5 text-green-600" />
            ) : (
              <ExclamationTriangleIcon className="w-5 h-5 text-gray-400" />
            )}
            <span className={`font-medium ${status.userLogin ? 'text-green-800' : 'text-gray-600'}`}>
              用户登录
            </span>
          </div>
        </div>
        
        <div className={`p-4 rounded-lg border-2 ${status.stsTest ? 'border-green-200 bg-green-50' : 'border-gray-200 bg-gray-50'}`}>
          <div className="flex items-center space-x-2">
            {status.stsTest ? (
              <CheckCircleIcon className="w-5 h-5 text-green-600" />
            ) : (
              <ExclamationTriangleIcon className="w-5 h-5 text-gray-400" />
            )}
            <span className={`font-medium ${status.stsTest ? 'text-green-800' : 'text-gray-600'}`}>
              COS密钥测试
            </span>
          </div>
        </div>
        
        <div className={`p-4 rounded-lg border-2 ${status.uploadReady ? 'border-green-200 bg-green-50' : 'border-gray-200 bg-gray-50'}`}>
          <div className="flex items-center space-x-2">
            {status.uploadReady ? (
              <CheckCircleIcon className="w-5 h-5 text-green-600" />
            ) : (
              <ExclamationTriangleIcon className="w-5 h-5 text-gray-400" />
            )}
            <span className={`font-medium ${status.uploadReady ? 'text-green-800' : 'text-gray-600'}`}>
              上传就绪
            </span>
          </div>
        </div>
      </div>

      {/* 控制按钮 */}
      <div className="flex flex-wrap gap-3">
        <button
          onClick={initEnvironment}
          disabled={isUploading}
          className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <PlayIcon className="w-4 h-4" />
          <span>开始自动测试</span>
        </button>
        
        <button
          onClick={clearLogs}
          disabled={isUploading}
          className="flex items-center space-x-2 px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <XMarkIcon className="w-4 h-4" />
          <span>清空日志</span>
        </button>
      </div>

      {/* 文件上传区域 */}
      {status.uploadReady && (
        <div className="bg-white p-6 rounded-lg shadow-sm border">
          <h2 className="text-lg font-semibold text-gray-900 mb-4 flex items-center space-x-2">
            <PhotoIcon className="w-5 h-5" />
            <span>图片上传测试</span>
          </h2>
          
          {/* 分类选择 */}
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              选择上传分类
            </label>
            <select
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value)}
              className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            >
              {categories.map(category => (
                <option key={category.key} value={category.key}>
                  {category.label}
                </option>
              ))}
            </select>
          </div>
          
          {/* 文件选择区域 */}
          <div
            className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-blue-400 hover:bg-blue-50 transition-colors cursor-pointer"
            onClick={() => fileInputRef.current?.click()}
            onDrop={handleDrop}
            onDragOver={handleDragOver}
            onDragLeave={handleDragLeave}
          >
            <PhotoIcon className="w-12 h-12 text-gray-400 mx-auto mb-4" />
            <p className="text-lg font-medium text-gray-700 mb-2">
              选择图片文件或拖拽到此处
            </p>
            <p className="text-sm text-gray-500">
              支持 JPG, PNG, GIF 等图片格式
            </p>
            
            <input
              ref={fileInputRef}
              type="file"
              multiple
              accept="image/*"
              onChange={handleFileSelect}
              className="hidden"
            />
          </div>
          
          {/* 已选文件列表 */}
          {selectedFiles.length > 0 && (
            <div className="mt-4">
              <div className="flex items-center justify-between mb-2">
                <h3 className="font-medium text-gray-700">已选择 {selectedFiles.length} 个文件</h3>
                <button
                  onClick={clearFiles}
                  disabled={isUploading}
                  className="text-red-600 hover:text-red-700 text-sm disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  清空选择
                </button>
              </div>
              
              <div className="space-y-2 max-h-40 overflow-y-auto">
                {selectedFiles.map((file, index) => (
                  <div key={index} className="flex items-center space-x-3 p-2 bg-gray-50 rounded">
                    <DocumentIcon className="w-5 h-5 text-gray-400" />
                    <div className="flex-1">
                      <div className="text-sm font-medium text-gray-700">{file.name}</div>
                      <div className="text-xs text-gray-500">
                        {(file.size / 1024).toFixed(1)}KB • {file.type}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
              
              {/* 上传按钮 */}
              <div className="mt-4 flex items-center space-x-4">
                <button
                  onClick={uploadFiles}
                  disabled={isUploading || !status.uploadReady}
                  className="flex items-center space-x-2 px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <CloudArrowUpIcon className="w-4 h-4" />
                  <span>{isUploading ? '上传中...' : '开始上传'}</span>
                </button>
                
                {isUploading && (
                  <div className="flex-1">
                    <div className="w-full bg-gray-200 rounded-full h-2">
                      <div
                        className="bg-green-600 h-2 rounded-full transition-all duration-300"
                        style={{ width: `${uploadProgress}%` }}
                      ></div>
                    </div>
                    <div className="text-sm text-gray-600 mt-1">
                      上传进度: {uploadProgress.toFixed(1)}%
                    </div>
                  </div>
                )}
              </div>
            </div>
          )}
        </div>
      )}

      {/* 上传结果 */}
      {uploadResults.length > 0 && (
        <div className="bg-white p-6 rounded-lg shadow-sm border">
          <h2 className="text-lg font-semibold text-gray-900 mb-4">上传结果</h2>
          
          <div className="space-y-4">
            {uploadResults.map((result, index) => (
              <div key={index} className={`p-4 rounded-lg border ${result.failed ? 'border-red-200 bg-red-50' : 'border-green-200 bg-green-50'}`}>
                <div className="flex items-start space-x-3">
                  {result.failed ? (
                    <ExclamationTriangleIcon className="w-5 h-5 text-red-600 mt-0.5" />
                  ) : (
                    <CheckCircleIcon className="w-5 h-5 text-green-600 mt-0.5" />
                  )}
                  
                  <div className="flex-1">
                    <div className="font-medium text-gray-900">{result.fileName}</div>
                    
                    {result.failed ? (
                      <div className="text-red-600 text-sm mt-1">{result.error}</div>
                    ) : (
                      <div className="space-y-1 mt-1">
                        <div className="text-sm text-gray-600">
                          大小: {(result.size / 1024).toFixed(1)}KB • 分类: {result.category}
                        </div>
                        <div className="text-sm text-gray-600">
                          COS路径: {result.cosKey}
                        </div>
                        <div className="text-sm">
                          <a 
                            href={result.cosUrl} 
                            target="_blank" 
                            rel="noopener noreferrer"
                            className="text-blue-600 hover:text-blue-700 underline"
                          >
                            {result.cosUrl}
                          </a>
                        </div>
                        
                        {/* 图片预览 */}
                        <div className="mt-2">
                          <img 
                            src={result.cosUrl} 
                            alt={result.fileName}
                            className="max-w-xs max-h-32 object-cover rounded border"
                            onError={(e) => {
                              e.target.style.display = 'none';
                            }}
                          />
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* 日志区域 */}
      <div className="bg-white p-6 rounded-lg shadow-sm border">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-lg font-semibold text-gray-900">测试日志</h2>
          <span className="text-sm text-gray-500">{logs.length} 条日志</span>
        </div>
        
        <div 
          ref={logContainerRef}
          className="bg-gray-900 text-gray-100 p-4 rounded-lg font-mono text-sm max-h-80 overflow-y-auto"
        >
          {logs.length === 0 ? (
            <div className="text-gray-400">暂无日志...</div>
          ) : (
            logs.map(log => (
              <div key={log.id} className="mb-1">
                <span className="text-gray-400">[{log.timestamp}]</span>
                <span className={`ml-2 ${
                  log.type === 'success' ? 'text-green-400' :
                  log.type === 'error' ? 'text-red-400' :
                  log.type === 'warning' ? 'text-yellow-400' :
                  'text-gray-100'
                }`}>
                  {log.message}
                </span>
              </div>
            ))
          )}
        </div>
      </div>
    </div>
  );
};

export default CosTestPage;
